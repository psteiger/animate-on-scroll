// Generated by CoffeeScript 1.10.0

/*!
* AnimateOnScroll
* github.com/psteiger/animate-on-scroll
 */

(function() {
  var animateOnScroll;

  animateOnScroll = function($) {
    "use strict";
    var AnimateOnScroll, _defaults, pluginName;
    pluginName = "animateOnScroll";
    _defaults = {
      container: "window",
      event: "scroll",
      fade: true,
      scale3d: false,
      offset_top: 0,
      offset_bottom: 0
    };
    AnimateOnScroll = (function() {
      function AnimateOnScroll(el1, options) {
        var el_center;
        this.el = el1;
        el_center = $(this.el).innerHeight() / 2;
        this.options = $.extend({}, _defaults, options);
        this.top_offsets = [this.options.offset_top - el_center, this.options.offset_top + el_center];
        this.bottom_offsets = [$(window).height() + el_center - this.options.offset_bottom, $(window).height() - el_center - this.options.offset_bottom];
        this._defaults = _defaults;
        this._name = pluginName;
        this.init();
      }

      AnimateOnScroll.prototype.init = function() {
        var container, event, self;
        self = this;
        container = this.options.container;
        event = this.options.event;
        if (container === "window" && event === "scroll") {
          $(window).scroll(function() {
            return self.update();
          });
        } else {
          $(container).on(event, function() {
            return self.update();
          });
        }
        return self;
      };

      AnimateOnScroll.prototype.update = function() {
        var el, v;
        el = this.el;
        if (this.elIsOnTop() || this.elIsOnBottom()) {
          v = this.computeTransformValue();
        }
        if (v != null) {
          if (this.options.fade) {
            $(el).css('opacity', v);
          }
          if (this.options.scale3d) {
            return $(el).css('transform', 'scale3d(' + v + ',' + v + ',' + v + ')');
          }
        }
      };

      AnimateOnScroll.prototype.computeTransformValue = function() {
        var a, b, ref, ref1, x, y, y_0, y_1;
        if (this.elIsOnTop()) {
          ref = this.top_offsets, y_0 = ref[0], y_1 = ref[1];
        } else if (this.elIsOnBottom()) {
          ref1 = this.bottom_offsets, y_0 = ref1[0], y_1 = ref1[1];
        } else {
          void 0;
        }
        a = 1 / (y_1 - y_0);
        x = this.getCurrentElOffset().center;
        b = -y_0 / (y_1 - y_0);
        y = a * x + b;
        return Math.min(Math.max(y, 0), 1);
      };

      AnimateOnScroll.prototype.getCurrentElOffset = function() {
        var bounds;
        bounds = $(this.el).get(0).getBoundingClientRect();
        return $.extend(bounds, {
          center: (bounds.top + bounds.bottom) / 2
        });
      };

      AnimateOnScroll.prototype.elIsOnTop = function() {
        var ref;
        return (0 <= (ref = this.getCurrentElOffset().bottom) && ref < $(window).height() / 2);
      };

      AnimateOnScroll.prototype.elIsOnBottom = function() {
        var ref;
        return ($(window).height() / 2 <= (ref = this.getCurrentElOffset().top) && ref <= $(window).height());
      };

      return AnimateOnScroll;

    })();
    $.fn.animateOnScroll = function(options) {
      return this.each(function() {
        var instance;
        instance = $.data(this, "plugin_" + pluginName);
        if (instance) {
          return $.extend(true, instance.options, options);
        } else {
          return $.data(this, "plugin_" + pluginName, new AnimateOnScroll(this, options));
        }
      });
    };
  };

  (function(plugin, window) {
    var hasDefine, hasExports;
    hasDefine = typeof define === "function" && (define.amd != null);
    hasExports = typeof module !== "undefined" && (module.exports != null);
    if (hasDefine) {
      return define(["jquery"], plugin);
    } else if (hasExports) {
      return module.exports = plugin(require("jquery"));
    } else {
      return plugin(window.jQuery || window.$);
    }
  })(animateOnScroll, window);

}).call(this);
